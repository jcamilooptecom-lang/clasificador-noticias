import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import joblib

# =======================
# Dataset ampliado
# =======================
data = {
    "titular": [
        # Solar
        "Instalan 2.000 paneles solares en escuelas rurales de Boyac√°",
        "Nueva planta solar fotovoltaica abastecer√° a 10.000 hogares",
        "Colombia supera r√©cord de generaci√≥n solar en 2025",
        "Proyecto solar en el desierto de La Tatacoa entra en operaci√≥n",
        "Paneles solares flotantes ser√°n instalados en embalses de Antioquia",

        # E√≥lica
        "Parque e√≥lico marino genera electricidad para 50.000 familias",
        "Nuevas turbinas e√≥licas en La Guajira duplican capacidad energ√©tica",
        "Avanza la construcci√≥n del mayor parque e√≥lico terrestre del pa√≠s",
        "Vientos del Caribe impulsan nueva planta e√≥lica",
        "Energ√≠a e√≥lica abastecer√° f√°bricas en el Atl√°ntico",

        # Biomasa
        "Planta de biomasa transforma residuos de palma en energ√≠a",
        "Aprovechan c√°scaras de arroz para generar electricidad en el Meta",
        "Nueva central de biomasa abastecer√° industrias locales",
        "Proyecto de biomasa con ca√±a de az√∫car reduce emisiones",
        "Producci√≥n de biog√°s a partir de residuos agr√≠colas",

        # Hidroel√©ctrica
        "Ampliaci√≥n de central hidroel√©ctrica en Antioquia entra en fase final",
        "Nueva represa hidroel√©ctrica aportar√° energ√≠a a tres departamentos",
        "Proyecto hidroel√©ctrico reduce dependencia de combustibles f√≥siles",
        "Hidroel√©ctrica en el Cauca genera energ√≠a limpia para comunidades",
        "Peque√±a hidroel√©ctrica abastecer√° veredas en Santander",

        # Geot√©rmica
        "Exploraci√≥n geot√©rmica en Nari√±o avanza con √©xito",
        "Hospital en Pasto ser√° abastecido con energ√≠a geot√©rmica",
        "Proyecto geot√©rmico aprovecha calor volc√°nico para producir electricidad",
        "Colombia estudia potencial geot√©rmico en zonas volc√°nicas",
        "Inician perforaciones para energ√≠a geot√©rmica en el Tolima",
    ],
    "categoria": (
        ["solar"]*5 +
        ["e√≥lica"]*5 +
        ["biomasa"]*5 +
        ["hidroel√©ctrica"]*5 +
        ["geot√©rmica"]*5
    )
}

df = pd.DataFrame(data)

# =======================
# Entrenamiento del modelo
# =======================
vectorizer = TfidfVectorizer()
X_tfidf = vectorizer.fit_transform(df["titular"])
model = MultinomialNB()
model.fit(X_tfidf, df["categoria"])

# Info adicional de cada tipo de energ√≠a
info_energia = {
    "solar": {
        "nombre": "Energ√≠a Solar ‚òÄ",
        "descripcion": "Aprovecha la radiaci√≥n del sol mediante paneles fotovoltaicos o sistemas t√©rmicos para generar electricidad o calor.",
        "ejemplo": "Planta solar de Cauchari en Argentina, con m√°s de 1 mill√≥n de paneles.",
        "color": "#FFD700"
    },
    "e√≥lica": {
        "nombre": "Energ√≠a E√≥lica üå¨",
        "descripcion": "Utiliza la fuerza del viento para mover turbinas que generan electricidad.",
        "ejemplo": "Parque E√≥lico Gecama en Espa√±a, con 312 MW de capacidad.",
        "color": "#ADD8E6"
    },
    "biomasa": {
        "nombre": "Energ√≠a de Biomasa üå±",
        "descripcion": "Convierte materia org√°nica como residuos agr√≠colas o forestales en electricidad, calor o biocombustibles.",
        "ejemplo": "Central de biomasa de Soria en Espa√±a, que usa astillas de madera.",
        "color": "#90EE90"
    },
    "hidroel√©ctrica": {
        "nombre": "Energ√≠a Hidroel√©ctrica üíß",
        "descripcion": "Genera electricidad aprovechando la fuerza del agua en movimiento, usualmente mediante presas.",
        "ejemplo": "Represa de Itaip√∫ entre Brasil y Paraguay, una de las mayores del mundo.",
        "color": "#87CEFA"
    },
    "geot√©rmica": {
        "nombre": "Energ√≠a Geot√©rmica üåã",
        "descripcion": "Utiliza el calor interno de la Tierra para generar electricidad o calefacci√≥n.",
        "ejemplo": "Planta geot√©rmica de Nesjavellir en Islandia.",
        "color": "#FFA07A"
    }
}

# =======================
# Interfaz en Streamlit
# =======================
st.set_page_config(page_title="Clasificador de Noticias", page_icon="üì∞", layout="wide")
st.title("üì∞ Clasificador de Noticias sobre Energ√≠as Renovables")
st.write("Esta aplicaci√≥n clasifica titulares de noticias y te muestra informaci√≥n sobre el tipo de energ√≠a renovable.")

# Entrada individual
st.header("üîç Clasificaci√≥n de un titular")
titular = st.text_input("Escribe el titular de la noticia:")

if st.button("Clasificar"):
    if titular.strip():
        X_new = vectorizer.transform([titular])
        pred = model.predict(X_new)[0]
        prob = model.predict_proba(X_new)[0]
        info = info_energia[pred]

        st.markdown(f"### {info['nombre']}")
        st.write(info['descripcion'])
        st.info(f"Ejemplo real: {info['ejemplo']}")
        st.markdown(f"**Probabilidad por categor√≠a:**")
        for cat, p in zip(model.classes_, prob):
            st.write(f"- {cat}: {p*100:.2f}%")
    else:
        st.warning("Por favor, escribe un titular.")

# Clasificaci√≥n en lote
st.header("üìÇ Clasificar titulares desde un archivo CSV")
archivo = st.file_uploader("Sube un archivo CSV con una columna llamada 'titular'", type=["csv"])
if archivo is not None:
    df_subida = pd.read_csv(archivo)
    if "titular" in df_subida.columns:
        X_lote = vectorizer.transform(df_subida["titular"])
        df_subida["categoria_predicha"] = model.predict(X_lote)
        st.write(df_subida)
        st.download_button("Descargar resultados", df_subida.to_csv(index=False), file_name="resultados.csv")
    else:
        st.error("El archivo debe tener una columna llamada 'titular'.")
